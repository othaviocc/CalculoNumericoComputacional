# -*- coding: utf-8 -*-
"""2.4 Método da Secante

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGO4bSvQy31mGfva5jWa5_N_kRq-slML
"""

import math
import matplotlib.pyplot as plt
import numpy as np

# Função segura a partir de string
def criar_funcao(expr):
    def f(x):
        try:
            return eval(expr, {"x": x, "math": math, "np": np})
        except:
            return float('nan')
    return f

def metodo_secante(f_expr, x0, x1, tol_percent, max_iter, raiz_verdadeira=None):
    f = criar_funcao(f_expr)

    iteracoes = []
    valores_x = []
    erros_aprox = []
    erros_reais = []

    print("\nIter |    x_n-1    |     x_n     |   x_(n+1)   | εa (%)   | Erro real (%)")

    for i in range(max_iter):
        f_x0 = f(x0)
        f_x1 = f(x1)

        if f_x1 - f_x0 == 0:
            print("⚠️ Divisão por zero na iteração", i)
            break

        x2 = x1 - f_x1 * (x1 - x0) / (f_x1 - f_x0)
        erro_aprox = abs((x2 - x1) / x2) * 100 if x2 != 0 else float('inf')
        erro_real = abs((raiz_verdadeira - x2) / raiz_verdadeira) * 100 if raiz_verdadeira else float('nan')

        print(f"{i:4d} | {x0:11.7f} | {x1:11.7f} | {x2:11.7f} | {erro_aprox:8.4f} | {erro_real:13.4f}")

        iteracoes.append(i)
        valores_x.append(x2)
        erros_aprox.append(erro_aprox)
        erros_reais.append(erro_real)

        if erro_aprox < tol_percent:
            print(f"\n✅ Convergiu para x ≈ {x2:.8f} com erro aproximado de {erro_aprox:.4f}%")
            break

        x0, x1 = x1, x2

    # Gráfico da convergência
    plt.figure(figsize=(10, 4))
    plt.plot(iteracoes, valores_x, marker='o', label='x aproximado')
    if raiz_verdadeira:
        plt.axhline(raiz_verdadeira, color='red', linestyle='--', label='x verdadeiro')
    plt.title("Convergência - Método da Secante")
    plt.xlabel("Iteração")
    plt.ylabel("x")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Gráfico do erro real
    if raiz_verdadeira:
        plt.figure(figsize=(10, 4))
        plt.plot(iteracoes, erros_reais, marker='x', color='orange', label='Erro real (%)')
        plt.axhline(tol_percent, color='gray', linestyle='--', label=f'Tolerância {tol_percent}%')
        plt.title("Erro Real Percentual")
        plt.xlabel("Iteração")
        plt.ylabel("Erro Real (%)")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plt.show()

# === ENTRADA DO USUÁRIO ===
try:
    f_expr = input("Digite a função f(x) (ex: math.exp(-x) - x): ")
    x0 = float(input("Digite o valor inicial x₀: "))
    x1 = float(input("Digite o valor inicial x₁: "))
    tol = float(input("Digite o erro percentual de parada (ex: 1 para 1%): "))
    max_iter = int(input("Digite o número máximo de iterações: "))
    raiz_input = input("Digite a raiz verdadeira (ou pressione Enter se não souber): ")
    raiz_verdadeira = float(raiz_input) if raiz_input else None

    metodo_secante(f_expr, x0, x1, tol, max_iter, raiz_verdadeira)

except Exception as e:
    print(f"\n❌ Erro: {e}")