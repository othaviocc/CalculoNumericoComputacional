# -*- coding: utf-8 -*-
"""2.3 Newton-Raphson

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fa3SE49uJAVsGTmyineUj_PyrkAqc5QZ
"""

import math
import matplotlib.pyplot as plt
import numpy as np
import sympy as sp

# === GERA f(x) e f'(x) A PARTIR DE STRING ===
def gerar_funcoes(expr):
    x = sp.Symbol('x')
    f_sym = sp.sympify(expr)
    df_sym = sp.diff(f_sym, x)

    f_lambda = sp.lambdify(x, f_sym, modules=["math"])
    df_lambda = sp.lambdify(x, df_sym, modules=["math"])

    print(f"\nüîß Derivada autom√°tica de f(x): f'(x) = {df_sym}")
    return f_lambda, df_lambda, str(df_sym)

# === M√âTODO DE NEWTON-RAPHSON ===
def newton_raphson_auto(f_expr, x0, tol_percent, max_iter, raiz_verdadeira=None):
    f, df, df_expr_str = gerar_funcoes(f_expr)

    iteracoes = []
    valores_x = []
    erros_aprox = []
    erros_reais = []

    print("\nIter |     x_n     |   f(x_n)   |  x_(n+1)   | Œµa (%)   | Erro real (%)")
    for i in range(max_iter):
        fx = f(x0)
        dfx = df(x0)

        if dfx == 0:
            print(f"‚ö†Ô∏è Derivada nula em x = {x0:.6f}, parada!")
            break

        x1 = x0 - fx / dfx
        erro_aprox = abs((x1 - x0) / x1) * 100 if x1 != 0 else float('inf')
        erro_real = abs((raiz_verdadeira - x1) / raiz_verdadeira) * 100 if raiz_verdadeira else float('nan')

        print(f"{i:4d} | {x0:11.7f} | {fx:10.7f} | {x1:10.7f} | {erro_aprox:8.4f} | {erro_real:13.4f}")

        iteracoes.append(i)
        valores_x.append(x1)
        erros_aprox.append(erro_aprox)
        erros_reais.append(erro_real)

        if erro_aprox < tol_percent:
            print(f"\n‚úÖ Convergiu para x ‚âà {x1:.8f} com erro aproximado de {erro_aprox:.4f}%")
            break

        x0 = x1

    # Gr√°fico da converg√™ncia
    plt.figure(figsize=(10, 4))
    plt.plot(iteracoes, valores_x, marker='o', label='x aproximado')
    if raiz_verdadeira:
        plt.axhline(raiz_verdadeira, color='red', linestyle='--', label='x verdadeiro')
    plt.title("Converg√™ncia - M√©todo de Newton-Raphson")
    plt.xlabel("Itera√ß√£o")
    plt.ylabel("x")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Gr√°fico do erro real
    if raiz_verdadeira:
        plt.figure(figsize=(10, 4))
        plt.plot(iteracoes, erros_reais, marker='x', color='orange', label='Erro real (%)')
        plt.axhline(tol_percent, color='gray', linestyle='--', label=f'Toler√¢ncia {tol_percent}%')
        plt.title("Erro Real Percentual")
        plt.xlabel("Itera√ß√£o")
        plt.ylabel("Erro Real (%)")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plt.show()

# === ENTRADA DO USU√ÅRIO ===
try:
    f_expr = input("Digite a fun√ß√£o f(x) (ex: exp(-x) - x): ")
    x0 = float(input("Digite o valor inicial x‚ÇÄ: "))
    tol = float(input("Digite o erro percentual de parada (ex: 1 para 1%): "))
    max_iter = int(input("Digite o n√∫mero m√°ximo de itera√ß√µes: "))
    raiz_input = input("Digite a raiz verdadeira (ou pressione Enter se n√£o souber): ")
    raiz_verdadeira = float(raiz_input) if raiz_input else None

    newton_raphson_auto(f_expr, x0, tol, max_iter, raiz_verdadeira)

except Exception as e:
    print(f"\n‚ùå Erro: {e}")