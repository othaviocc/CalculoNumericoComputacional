# -*- coding: utf-8 -*-
"""2.2 Método do ponto fixo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m8jMKIqGhIJyNvCzJkE46gQ13UU-wKAT
"""

import math
import matplotlib.pyplot as plt
import numpy as np

# Cria função segura a partir de string
def criar_funcao(expr):
    def func(x):
        try:
            return eval(expr, {"x": x, "math": math, "np": np})
        except:
            return float('nan')
    return func

# Método do ponto fixo com entrada geral
def ponto_fixo_geral(f_expr, g_expr, x0, tol_percent, max_iter, raiz_verdadeira=None):
    f = criar_funcao(f_expr)
    g = criar_funcao(g_expr)

    iteracoes = []
    valores_x = []
    erros_approx = []
    erros_reais = []

    print("\nIter |     x_n     |    x_(n+1)  |   εa (%)   |  Erro real (%)")
    for i in range(max_iter):
        x1 = g(x0)
        if x1 != 0:
            erro_aprox = abs((x1 - x0) / x1) * 100
        else:
            erro_aprox = float('inf')

        if raiz_verdadeira is not None:
            erro_real = abs((raiz_verdadeira - x1) / raiz_verdadeira) * 100
        else:
            erro_real = float('nan')

        print(f"{i:4d} | {x0:11.7f} | {x1:11.7f} | {erro_aprox:9.4f} | {erro_real:11.4f}")

        iteracoes.append(i)
        valores_x.append(x1)
        erros_approx.append(erro_aprox)
        erros_reais.append(erro_real)

        if erro_aprox < tol_percent:
            print(f"\n✅ Convergiu para x ≈ {x1:.8f} com erro aproximado de {erro_aprox:.4f}%")
            break

        x0 = x1

    # Gráfico da convergência
    plt.figure(figsize=(10, 4))
    plt.plot(iteracoes, valores_x, marker='o', label='x aproximado')
    if raiz_verdadeira is not None:
        plt.axhline(raiz_verdadeira, color='red', linestyle='--', label='x verdadeiro')
    plt.title("Convergência do Método do Ponto Fixo")
    plt.xlabel("Iteração")
    plt.ylabel("x")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Gráfico do erro real percentual
    if raiz_verdadeira is not None:
        plt.figure(figsize=(10, 4))
        plt.plot(iteracoes, erros_reais, marker='x', color='orange', label='Erro real (%)')
        plt.axhline(y=tol_percent, color='gray', linestyle='--', label=f'Tolerância {tol_percent}%')
        plt.title("Erro Real Percentual em Cada Iteração")
        plt.xlabel("Iteração")
        plt.ylabel("Erro Real (%)")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

# === ENTRADAS DO USUÁRIO ===
try:
    f_expr = input("Digite a função f(x) (ex: math.exp(-x) - x): ")
    g_expr = input("Digite a função g(x) para ponto fixo (ex: math.exp(-x)): ")
    x0 = float(input("Digite o valor inicial x₀: "))
    tol = float(input("Digite o erro percentual de parada (ex: 5 para 5%): "))
    max_iter = int(input("Digite o número máximo de iterações: "))

    raiz_input = input("Digite a raiz verdadeira (ou pressione Enter se não souber): ")
    raiz_verdadeira = float(raiz_input) if raiz_input else None

    ponto_fixo_geral(f_expr, g_expr, x0, tol, max_iter, raiz_verdadeira)

except Exception as e:
    print(f"\n❌ Erro: {e}")