# -*- coding: utf-8 -*-
"""Aula 1.2 exercício 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DeDrTUrLjyl7DBI7sPPPfABT8YWbJtiY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Função para avaliar o polinômio a partir de coeficientes e um valor de x
def avaliar_polinomio(coeficientes, x):
    return sum(coef * x**i for i, coef in enumerate(coeficientes))

# Função para truncar um número para um número específico de algarismos significativos
def truncar(numero, alg_signif):
    if numero == 0:
        return 0
    ordem = int(np.floor(np.log10(abs(numero))))
    fator = 10**(ordem - (alg_signif - 1))
    return np.floor(numero / fator) * fator

# Entrada dos coeficientes do polinômio
grau = int(input("Digite o grau do polinômio: "))
coeficientes = []
for i in range(grau, -1, -1):
    coef = float(input(f"Digite o coeficiente de x^{i}: "))
    coeficientes.append(coef)

# Entrada dos valores de x
num_x = int(input("Quantos valores de x deseja inserir? "))
valores_x = [float(input(f"Digite o valor de x {i+1}: ")) for i in range(num_x)]

# Entrada da quantidade de algarismos significativos para truncamento
alg_signif = int(input("Digite a quantidade de algarismos significativos para truncamento: "))

# Lista para armazenar os resultados
resultados = []

# Cálculo para cada valor de x
for x_value in valores_x:
    y_exact = avaliar_polinomio(coeficientes, x_value)
    x_trunc = truncar(x_value, alg_signif)

    termos_truncados = [truncar(coef * x_trunc**i, alg_signif) for i, coef in enumerate(coeficientes)]
    y_trunc = truncar(sum(termos_truncados), alg_signif)

    erro_rel_percentual = abs((y_exact - y_trunc) / y_exact) * 100

    # Adiciona os resultados à lista com 8 casas decimais
    resultados.append([
        f"{x_value:.8f}", f"{y_exact:.8f}",
        f"{x_trunc:.8f}", f"{y_trunc:.8f}",
        f"{erro_rel_percentual:.8f}"
    ])

# Criando tabela com Pandas
tabela = pd.DataFrame(resultados, columns=["x exato", "y exato", "x truncado", "y truncado", "Erro %"])
print("\nResultados:")
print(tabela.to_string(index=False))

# Geração do gráfico
x_vals = np.linspace(min(valores_x) - 1, max(valores_x) + 1, 400)
y_vals = [avaliar_polinomio(coeficientes, x) for x in x_vals]

plt.figure(figsize=(8, 5))
plt.plot(x_vals, y_vals, label="Polinômio Original", color='blue')
plt.scatter(valores_x, [avaliar_polinomio(coeficientes, x) for x in valores_x], color='red', label="Pontos Escolhidos", zorder=3)

plt.xlabel("x")
plt.ylabel("y")
plt.title("Gráfico do Polinômio e Pontos Escolhidos")
plt.legend()
plt.grid(True)
plt.show()