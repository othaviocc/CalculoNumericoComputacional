# -*- coding: utf-8 -*-
"""2.1 M√©todo da Bisse√ß√£o

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iBCExg7DKrVeCPDlC0xYsKrn7i4iL-eC
"""

import math
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, Text, FloatText
from IPython.display import display, Markdown

# Cria fun√ß√£o a partir de string
def criar_funcao(expressao):
    def f(x):
        return eval(expressao, {"x": x, "math": math, "np": np})
    return f

# M√©todo da Bisse√ß√£o
def bissecao(f, a, b, tol=1e-6, max_iter=100):
    for i in range(max_iter):
        c = (a + b) / 2
        fc = f(c)

        if abs(fc) < tol or (b - a)/2 < tol:
            return c

        if f(a) * fc < 0:
            b = c
        else:
            a = c
    return (a + b) / 2

# Interface com m√∫ltiplos valores de x
def interface_bissecao_multipla(expressao, x_valores_str, tol):
    try:
        f = criar_funcao(expressao)

        # Converte a lista de valores
        x_lista = sorted([float(x.strip()) for x in x_valores_str.split(',')])
        f_lista = [f(x) for x in x_lista]

        display(Markdown("### üî¢ Valores de f(x)"))
        for x, fx in zip(x_lista, f_lista):
            print(f"x = {x:>6.3f} | f(x) = {fx: .6f}")

        display(Markdown("### üîç Verificando intervalos com mudan√ßa de sinal"))

        encontrou = False
        for i in range(len(x_lista) - 1):
            x1, x2 = x_lista[i], x_lista[i+1]
            f1, f2 = f(x1), f(x2)

            if f1 * f2 < 0:
                encontrou = True
                display(Markdown(f"‚úÖ Intervalo v√°lido: [{x1}, {x2}] ‚Äî f(x) muda de sinal"))
                raiz = bissecao(f, x1, x2, tol)
                print(f"Raiz aproximada: {raiz:.6f}")

                # Gr√°fico
                x_plot = np.linspace(x1, x2, 400)
                y_plot = [f(xi) for xi in x_plot]
                plt.figure(figsize=(8, 4))
                plt.axhline(0, color='gray', linewidth=0.5)
                plt.plot(x_plot, y_plot, label=f"f(x) = {expressao}")
                plt.plot(raiz, f(raiz), 'ro', label=f"Raiz ‚âà {raiz:.6f}")
                plt.title(f"Raiz no intervalo [{x1}, {x2}]")
                plt.xlabel("x")
                plt.ylabel("f(x)")
                plt.legend()
                plt.grid(True)
                plt.show()

        if not encontrou:
            display(Markdown("‚ö†Ô∏è **Nenhum intervalo com mudan√ßa de sinal foi encontrado nos valores de x fornecidos.**"))

    except Exception as e:
        display(Markdown(f"‚ùå **Erro ao processar:** `{e}`"))

# Widgets
expr_widget = Text(value='(667.38 / x) * (1 - math.exp(-0.146843 * x)) - 40', description='f(x):')
x_vals_widget = Text(value='1, 2, 3, 4, 5', description='Valores x:')
tol_widget = FloatText(value=1e-6, description='Toler√¢ncia:')

# Interface
interact(interface_bissecao_multipla,
         expressao=expr_widget,
         x_valores_str=x_vals_widget,
         tol=tol_widget);